// How Code is Executed in Js.
/*
JavaScript Execution Context.
when you run the js file, first Global Execution context(EC) is made. this is compulsory. and stored in this.
js is single thread.
Functional Execution Context and Eval Execution Context.
Js is run in 2 phases starting with
    -Memory **Creation Phase**  => In this phase Memory is created i.e. no execution , just memory is created to store variables.
    -Execution Phase => Files is executed here.


Example:- 
Example of a code:-
        let val1=10
        let val2=5
        function addNum(num1,num2){
            let total = num1+num2
            return total
        }
        let result1 = addNumber(val1, val2)
        let result2 = addNum(10,2)


How is it executed...........
in the start:-
1. Global Execution then saved in this.
    Gloabl Execution => this.

2. Memory Phase
  how would it be saved.
    val1=> undefined
    val2 => undefined
    addnum => undefined
    result1 => undefined
    result2 => undefined

3. Execution Phase
    val1 <= 10
    val2 <= 5
    addNum = > new execution context is created.
            => new variable environment + Execution thread is created.
                  => Memory phase is created
                        val1 => undefined
                        val2 => undefined
                        total => undefined 
                  => Execution Context 
                          num1 = > 10
                          num2  => 5
                          total => 15
                  **As this is created and calculated, after execution, it is deleted.

                  now this total is send to global execution in this keyword.

                  After this, result2 is calculated the same as result1. 
*/

/*


1 year ago
1.JS creates Global excution context 
2.Next it creates memory phase
3.Memory phase - In this phase,the variables are set to undefined 
  until the execution phase(next phase) and the functions are set to their definitions.
4.Next it creates the execution phase
5.Execution phase - In this phase,the variables are initialsed to given values and 
  when the function s are called,it creates a memory phase and execution phase for the function 
  just like the main one.

For live demo:
browser > inspect > Sources
create a snippet with few functions and visually experience the call stack.

***********************************************************************************************
The working of the JavaScript works on three phases:
1. Global Execution Context
2. Memory phase / Creation phase
3. Execution phase

Phase 1: Global Execution Context
The value of `this` keyword is set to Global Execution Context (which is an empty Object in NODE environment, & window object in browser environment)

Phase 2: Memory phase
During this phase, JS engine scans the code and assigns the initial values for the variables , functions, etc.. For variables they are 'undefined' and for functions they are set to their function definition

Phase 3: Execution phase
After the creation phase completed, the execution phase begins where actual values of the variables are set. And when the functions are called it creates a new 'Function Execution' context which consists of two phases (they works same as explained above but only for the particular function scope):
1. Memory phase 
2. Execution phase 
The return value of the 'Function Execution' context is passed to the Global Execution Context



*/
